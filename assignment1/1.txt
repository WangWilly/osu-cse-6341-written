Assignment 1

================================================================================
Q1: (apply rightmost derivation; always expands the rightmost non-terminal)
int y = z + x; int x = z;
--------------------------------------------------------------------------------
Grammar:

<program> ::= <stmtList>

<stmtList> ::= <stmt> <stmtList>
| <stmt>

<stmt> ::= <varDecl> = <expr> ;
| ident = <expr> ;

<varDecl> ::= int ident

<expr> ::= intconst
| ident
| <expr> + <expr>
--------------------------------------------------------------------------------

My answer:
<program>
=> <stmtList>
=> <stmt> <stmtList>
=> <stmt> <stmt>
=> <stmt> <varDecl> = <expr> ;
=> <stmt> <varDecl> = ident_z ;
=> <stmt> int ident_x = ident_z ;
=> <varDecl> = <expr> ; int ident_x = ident_z ;
=> <varDecl> = <expr> + <expr> ; int ident_x = ident_z ;
=> <varDecl> = <expr> + ident_x ; int ident_x = ident_z ;
=> <varDecl> = ident_z + ident_x ; int ident_x = ident_z ;
=> int ident_y = ident_z + ident_x ; int ident_x = ident_z ;

================================================================================
Q2:
Consider the grammar from Q1, with the following modifications:
<stmt> ::= <varDecl> ; | <varDecl> = <expr> ; | ident = <expr> ;
<varDecl> ::= int ident | float ident
<expr> ::= intconst | floatconst | ident | <expr> + <expr>

    Part1: Consider some parse tree for
    int b = x + y + z; float c = b;

    My answer:
    Tree1:
    ((((int) (ident_b)) (=) (((ident_x) (+) (ident_y)) (+) (ident_z)) (;)) (((float) (ident_c)) (=) (ident_b) (;)))
    Tree2:
    ((((int) (ident_b)) (=) ((ident_x) (+) ((ident_y) (+) (ident_z))) (;)) (((float) (ident_c)) (=) (ident_b) (;)))

    How many nodes are in this parse tree?
    25

    How many of these nodes are leaf nodes?
    14

    Part2: This grammer is ambiguous. Explain whether/how this affects your answer for Part1.

    My answer:
    The expression can be parsed in two different ways. The parse tree can have multiple valid interpretations,
    might leading to different result values. The different result values may come from the computation order of the
    expression. i.e. the order of the addition operation of floating numbers.

================================================================================
Q3:

    Part1: Consider the following program:
    ```
    int b = x + y + z; float c = b;
    ```
    For each of these 11 classes, show how many instances (i.e., objects) of this class exist in
    the AST for this program.

    My answer:
    Consider the AST:
        - Program: 1
        - StmtList: 2
        - Stmt: 2
        - IntVarDecl: 1
        - FloatVarDecl: 1
        - Expr: 2
        - IdentExpr: 4
    => 1 + 2 + 2 + 1 + 1 + 2 + 4 = 13

    Part2: Show the subtree of the AST corresponding to expression x + y + z. When showing each
    AST node, label it with the corresponding Java class name (for the non-abstract class of AST
    node). Based on the shape of this AST subtree, discuss whether the parser provided to you in
    Project 1 uses left-associativity or right-associativity for operator +.

    My answer:

    Subtree:
        ```
                    <PlusExpr>
                    /         \
                <PlusExpr>  <IdentExpr>
                /        \
        <IdentExpr>   <IdentExpr>
        ```
    
    The subtree shows that the parser uses left-associativity for operator +. => ((x + y) + z)
    
